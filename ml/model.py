from pathlib import Path
import pandas as pd
import numpy as np
from catboost import CatBoostRegressor
from ml.utils import feature_transform
import yaml
import warnings


# load config file
config_path = Path(__file__).parent / "config.yaml"
with open(config_path, "r") as file:
    config = yaml.load(file, Loader=yaml.FullLoader)


class MedianAPE:
    def __init__(self, f=lambda x: x, inv_f=lambda x: x):
        self.f = f
        self.inv_f = inv_f


    def get_final_error(self, error, weight=1.0):
        return error

    def is_max_optimal(self):
        # the lower metric value the better
        return False

    def evaluate(self, approxes, target, weight=None):
        assert len(approxes) == 1
        assert len(target) == len(approxes[0])

        approx = approxes[0]

        preds = self.inv_f(np.array(approx))
        target = self.inv_f(np.array(target))
        error = np.median((np.abs(np.subtract(target, preds) / target))) * 100
        return (error, 1.0)


class Model:
    def __init__(self):
        self.cat_features = [
        "brand", "model", "generation",
        "body_type", "drive_type", "transmission_type", "engine_type",
        "color", "pts", "owners_count", "city",
        "generation_years"
    ]

        self.num_features = [
            "doors_number",
            "year",
            "mileage",
            "horse_power",
            "month",
            "mileage_per_year",
            "base_price",
            "restyling",
            "engine_volume",
        ]

        self.emb_features = ["desc_embs", "mod_embs", "eq_embs", "tfidf_embs"]
        self.text_features = ["lemmatized_description", "brand_model_gen_res_mod", "modification", "equipment", ]
        self.params = dict(
            cat_features=self.cat_features,
            text_features=self.text_features,
            embedding_features=self.emb_features,
            learning_rate=0.05,
            iterations=5000,
            reg_lambda=0.0005,
            colsample_bylevel=1.,
            max_bin=80,
            bagging_temperature=2,
            loss_function="MAE",
            use_best_model=True,
            verbose=500,
            grow_policy="Depthwise",
            has_time=True,
            random_seed=42,
            eval_metric=MedianAPE(),
    )
        self.model = CatBoostRegressor(**self.params)
        path = Path(__file__).parent.parent / config["model_path"]
        self.model.load_model(path)

    def predict(self, x: dict) -> float:
        x = pd.Series(x).to_frame().T
        x = feature_transform(x)
        col_order = self.model.feature_names_  # catboost requires same order of cols
        preds = self.model.predict(x[col_order])
        return preds


if __name__ == "__main__":
    warnings.simplefilter("ignore")

    debug_model = Model()
    debug_car = {
        "brand": "Toyota",
        "model": "Land Cruiser Prado",
        "sale_end_date": "2023-02-10 00:00:00",
        "description": "‚úî 3 –í–õ–ê–î–ï–õ–¨–¶–ê –ü–û –ü–¢–° \n‚úî –í –†–û–î–ù–û–ú –û–ö–†–ê–°–ï\n‚úî –ò–î–ï–ê–õ–¨–ù–û–ï –í–ù–ï–®–ù–ï–ï –°–û–°–¢–û–Ø–ù–ò–ï\n‚úî –ò–î–ï–ê–õ–¨–ù–û–ï –¢–ï–•–ù–ò–ß–ï–°–ö–û–ï –°–û–°–¢–û–Ø–ù–ò–ï\n‚úî –ü–û–õ–ù–û–°–¢–¨–Æ –û–ë–°–õ–£–ñ–ï–ù–ù–´–ô\n‚úî –û–ë–°–õ–£–ñ–ò–í–ê–ù–ò–ï –£ –û–§. –î–ò–õ–ï–†–ê\n‚úî –ù–ï –¢–†–£–ë–£–ï–¢ –í–õ–û–ñ–ï–ù–ò–ô \n‚úî KDSS –û–ë–°–õ–£–ñ–ï–ù\n‚úî –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–ê–Ø –ö–û–ú–ü–õ–ï–ö–¢–ê–¶–ò–Ø –õ–Æ–ö–° (5 –ú–ï–°–¢)\n\n–ü—Ä–æ–¥–∞–≤–µ—Ü ‚Äì –∫—Ä—É–ø–Ω–µ–π—à–∏–π –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –¥–∏–ª–µ—Ä TOYOTA & LEXUS –≤ –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥–µ. –ë–æ–ª–µ–µ 400 –∞/–º –≤ –Ω–∞–ª–∏—á–∏–∏. üìå–ö—Ä–µ–¥–∏—Ç –ø–æ –¥–≤—É–º –¥–æ–∫—É–º–µ–Ω—Ç–∞–º üìå–û–¥–æ–±—Ä–µ–Ω–∏–µ –∫—Ä–µ–¥–∏—Ç–∞ –∑–∞ 1 —á–∞—Å –∏ –≤—ã–¥–∞—á–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è –¥–µ–Ω—å –≤ –¥–µ–Ω—å üìå –†–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ –≤ 10 –±–∞–Ω–∫–∞—Ö –ø–∞—Ä—Ç–Ω–µ—Ä–∞—Ö üìå –õ—É—á—à–∏–µ —Ç–∞—Ä–∏—Ñ—ã –ö–ê–°–ö–û, –û–°–ê–ì–û, –ì–¢–û –í—Å–µ –∞–≤—Ç–æ–º–æ–±–∏–ª–∏ —Å –ø—Ä–æ–±–µ–≥–æ–º –¥–æ—Å—Ç—É–ø–Ω—ã –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É –µ–∂–µ–¥–Ω–µ–≤–Ω–æ —Å 9:00, –¥–æ 21:00\n–û—Å–º–æ—Ç—Ä–µ—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—å –º–æ–∂–Ω–æ –ø–æ –∞–¥—Ä–µ—Å—É: –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥, –í–∏–ª–ª–æ–∑—Å–∫–æ–µ –≥–æ—Ä–æ–¥—Å–∫–æ–µ –ø–æ—Å–µ–ª–µ–Ω–∏–µ, –¥. 3, —Å—Ç—Ä–æ–µ–Ω–∏–µ 1\n\n–ú–µ—Å—Ç–æ –æ—Å–º–æ—Ç—Ä–∞\n\n–û—Å–º–æ—Ç—Ä–µ—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—å –º–æ–∂–Ω–æ –ø–æ –∞–¥—Ä–µ—Å—É: –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥, –í–∏–ª–ª–æ–∑—Å–∫–æ–µ –≥–æ—Ä–æ–¥—Å–∫–æ–µ –ø–æ—Å–µ–ª–µ–Ω–∏–µ, –¥. 3, —Å—Ç—Ä–æ–µ–Ω–∏–µ 1",
        "year": 2015,
        "generation": "150 —Ä–µ—Å—Ç–∞–π–ª–∏–Ω–≥ (2013‚Äî2017)",
        "body_type": "–í–Ω–µ–¥–æ—Ä–æ–∂–Ω–∏–∫",
        "equipment": None,
        "modification": "2.8 D AT (177 –ª.—Å.)",
        "drive_type": "–ü–æ–ª–Ω—ã–π",
        "transmission_type": "–ê–≤—Ç–æ–º–∞—Ç",
        "engine_type": "–î–∏–∑–µ–ª—å",
        "doors_number": 5,
        "color": "–ß—ë—Ä–Ω—ã–π",
        "pts": "–î—É–±–ª–∏–∫–∞—Ç",
        "owners_count": "3",
        "mileage": 260222,
        "latitude": 59.939095,
        "longitude": 30.315868,
        }

    #debug_car = pd.Series(debug_car).to_frame().T
    #debug_car = feature_transform(debug_car)
    #print(type(debug_car.desc_embs.values[0][0]))
    #print(debug_model.model.feature_names_[25])
    #print(debug_model.model.get_params())

    print(debug_model.predict(debug_car))
